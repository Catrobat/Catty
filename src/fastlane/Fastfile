# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

ENV["FASTLANE_SKIP_UPDATE_CHECK"] = "1"
opt_out_usage

default_platform(:ios)
platform :ios do

  $catty_schemes = {
    "release" => "Catty (RELEASE)",
    "debug" => "Catty (DEBUG)"
  } 
  $build_dir = "fastlane/builds/"
  $branch_name= git_branch.sub("origin/", "").sub("upstream/", "")

  desc "Upload Development Build to Browserstack"
  lane :upload_to_browserstack do
    upload_to_browserstack_app_live(
      browserstack_username: ENV["BROWSERSTACK_USERNAME"],
      browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
      file_path: $build_dir+$branch_name+".ipa"
    )
  end

  desc "Create an ipa Build (options: scheme)"
  lane :create_build do |options|
    gym(scheme: options[:scheme],
        export_method: "development",
        output_directory: $build_dir,
        output_name: $branch_name
    )
  end

  desc "Prepare for PO Review"
  lane :po_review do
    create_build scheme:$catty_schemes["release"]
    upload_to_browserstack
  end

  desc "Upload Translations to Crowdin"
  lane :crowdin_upload do
    sh ("curl \
          -F \"files[catty/Localizable.strings]=@../Catty/Resources/Localization/en.lproj/Localizable.strings\" \
          -F \"export_patterns[catty/Localizable.strings]=/catty/%osx_code%/%original_file_name%\" \
          https://api.crowdin.com/api/project/catrobat/update-file?key="+ENV["CROWDIN_KEY"])
  end

  desc "Download all Translations from Crowdin"
  lane :crowdin_download do
    sh ("wget -O crowdin.zip https://api.crowdin.com/api/project/catrobat/download/all.zip?key="+ENV["CROWDIN_KEY"])
    sh ("unzip -o crowdin.zip -d crowdin")
  end

  desc "Update lane for Crowdin translations"
  lane :update_translations do
    # Move old translations to backup location
    rsync(
      source: "Catty/Resources/Localization/*",
      destination: "fastlane/crowdin.old/"
    )
    sh ("find ../Catty/Resources/Localization/* ! -name 'en.lproj' -type d -exec rm -rf {} +")

    # Upload
    crowdin_upload

    # Download
    crowdin_download

    # Sync
    rsync(
      source: "fastlane/crowdin/catty/*",
      destination: "Catty/Resources/Localization/"
    )

    # Update xcodeproj
    sh ("ruby rb/update_translations_xcodeproj.rb")

    # Cleanup
    sh ("rm -r crowdin")
    sh ("rm crowdin.zip")
    #sh ("rm -r crowdin.old")
  end

  desc "Run tests"
  lane :tests do
    clear_derived_data
    reset_simulator_contents
    
    #run_tests(devices: ["iPhone 7"],
    #          scheme: $catty_schemes["debug"])
    
    #https://github.com/fastlane/fastlane/issues/13414
    #Workaround for parallel testing issue
    scan(devices: ["iPhone 7 (12.0)"],
      scheme: $catty_schemes["debug"], 
      output_types: "", 
      fail_build: false)

    trainer(output_directory: "./fastlane/test_output/")
  end

  #https://github.com/fastlane/fastlane/issues/13414
  fastlane_require 'scan'
  module ::Scan
    class ErrorHandler
      class << self
        alias_method :orig_handle_build_error, :handle_build_error
        def handle_build_error(output)
          # Only call the original handle_build_error method if we can tell that there weren't failing tests
          orig_handle_build_error(output) if (output =~ /Failing tests:/).nil?
        end
      end
    end
  end

  desc "Release Pocket Code"
  lane :release do
    build_app(scheme: $catty_schemes["release"])
  end

  desc "Use this lane as playground"
  lane :playground do

  end
end
